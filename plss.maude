load metaInterpreter.maude
load parsing.maude
load grammar.maude
load file.maude
load parsing-softdish.maude
load plallSS.maude
load parsing-command.maude


mod PLSS is
 pr (MAYBE * (op maybe to noMod)){Module} .
 pr (MAYBE * (op maybe to noQid)){Qid} .
 pr (MAYBE * (op maybe to null)){Oid} .
 pr COMMAND-PROCESSING .
 inc META-INTERPRETER .
 pr META-PLSS-SIGN .
 pr PRELOAD-LIST .
 inc STD-STREAM .
 pr ERROR-MSGS .
 pr DATABASE .
 pr SOFTDISH-PARSING .
 pr UNDEF-TO-SEMI .     --- QQ UNDEF-TO-SEMI
 inc FILE .

 vars Text Original Read Source STR MSG : String .
 vars TL TL' BUBBS MODL IN INPLST ATTS : TermList .
 vars T T' T'' T1 T2 T3 T4 DISH : Term .
 vars FHIn FHOut MI : Oid .
 var  MM : Maybe{Module} .
 var  AtS : AttributeSet .
 var  LP : List{Preload} .
 vars DB DB' : Database .
 vars QIL ERR SDL : QidList .
 vars M M' TOP : Module .
 var  VS : VariableSet .
 var  MQ : Maybe{Qid} .
 var  SI : SortInfo .
 vars Ty Ty' : Type .
 var  SD : Softdish .
 var  Q : Qid .
 var  N : Nat .

 sort State .
 *** Initial state, metainterpreter is created
 op init : -> State [ctor] .
 *** Loading from standard database
 op load-std-db : -> State [ctor] .
 *** Loading grammar
 op load-grammar : -> State [ctor] .
 *** Create user metainterpreter
 op load-user-mi : -> State [ctor] .
 *** Load modules into user metainterpreter
 op load-user-mods : -> State [ctor] .
 *** Waiting input from the user
 op idle : -> State [ctor] .
 *** Reading file
 op readFile : -> State [ctor] .
 *** Parsing Module - metaparse
 op parseModMetaparse : -> State [ctor] .
 *** Parsing - create module list
 op parseList : -> State [ctor] .
 *** Parsing Module
 op parseModBubbles : -> State [ctor] .
 *** Parsing Module
 op parseModule : -> State [ctor] .
 *** Get parsed module
 op getModule : -> State [ctor] .
 *** Parsing command
 op parseComm : -> State [ctor] .
 *** Execute command
 op executeComm : -> State [ctor] .
 *** Waits for a wrote msg and returns to idle with getLine
 op print&idle : -> State [ctor] .
 *** Waits for a wrote msg and keeps executing commands.
 op print&executeComm : -> State [ctor] .
 *** Extracts the softdish module from the metainterpreter
 op processSoftdish : -> State [ctor] .
 *** foo state
 op foo : -> State [ctor] .

 *** Object and class definition
 op PLSS : -> Cid .
 op plss : -> Oid .

 *** Attributes
 op uload:_ : List{Preload} -> Attribute [ctor gather (&)] .
 op load:_ : List{Preload} -> Attribute [ctor gather (&)] .
 op parsModName:_ : Maybe{Qid} -> Attribute [ctor] .
 op module:_ : Maybe{Module} -> Attribute [ctor] .
 op current:_ : Maybe{Qid} -> Attribute [ctor] .
 op top:_ : Maybe{Module} -> Attribute [ctor] .
 op bubbles:_ : TermList -> Attribute [ctor] .
 op file:_ : Maybe{Oid} -> Attribute [ctor] .
 op input:_ : TermList -> Attribute [ctor] .
 op spec:_ : QidList -> Attribute [ctor] .
 op select-spec:_ : Maybe{Qid} -> Attribute [ctor] .
 op db:_ : Database -> Attribute [ctor] .
 op state:_ : State -> Attribute [ctor] .
 op out:_ : String -> Attribute [ctor] .
 op umi:_ : Oid -> Attribute [ctor] .
 op mi:_ : Oid -> Attribute [ctor] .

 *** Initial value for loading into the parsing metainterpreter
 op modList : -> List{Preload} .
 eq modList = module('TRUTH-VALUE) module('BOOL-OPS) module('TRUTH)
              module('BOOL) module('EXT-BOOL) module('NAT) module('RANDOM)
              module('COUNTER) module('INT) module('RAT) module('FLOAT)
              module('STRING) module('CONVERSION) module('BOUND) 
              module('QID) view('Qid) module('TRIV) view('TRIV)
              module('LIST) module('QID-LIST) 
              module('COMMON-SIGN) module('SPEC-SIGN) module('COMMAND-SIGN) module('PLSS-SIGN) .

 *** Initial value for loading into the user metainterpreter
 op umodList : -> List{Preload} .
 eq umodList = module('TRUTH-VALUE) module('BOOL-OPS) module('TRUTH) module('BOOL)
               module('NAT) module('TRIV) module('@NOMINAL@) .

 *** Initial value for loading into the user module
 op qModule : -> Qid .
 eq qModule = 'QQ .
 op userModule : -> FModule .
 eq userModule = upModule(qModule, true) .

 *** Run command
 op run : -> Configuration [ctor] .

 ***      PARSE COMMAND      ***

 rl [parseComm] : gotLine(plss, stdin, Text)
    < plss : PLSS | mi: MI, state: idle, AtS >
 => < plss : PLSS | mi: MI, state: parseComm, AtS >
    parseTerm(MI, plss, 'GRAMMAR, none, tokenize(Text), '@Input@) .

 crl [parseComm] :
     parsedTerm(plss, MI, {T, Ty})
     < plss : PLSS | mi: MI, state: parseComm, input: IN, AtS >
  => < plss : PLSS | mi: MI, state: executeComm, input: TL, AtS >
  if TL := extractTerms(T) .

 ***          EMPTY          ***

 rl [emptyCommList] :
    < plss : PLSS | state: executeComm, input: empty, AtS >
 => < plss : PLSS | state: idle, input: empty, AtS >
    getLine(stdin, plss, "PLSS> ") .

 ***    PRINT & CONTINUE     ***

 rl [print&idle] : wrote(plss, stdout)
    < plss : PLSS | state: print&idle, AtS >
 => < plss : PLSS | state: idle, AtS >
    getLine(stdin, plss, "PLSS> ") .

 rl [print&executeComm] : wrote(plss, stdout)
    < plss : PLSS | state: print&executeComm, AtS >
 => < plss : PLSS | state: executeComm, AtS > .


 ***                         ***
 ***          LOAD           ***
 ***                         ***

 crl [loadComm] :
    < plss : PLSS | state: executeComm, input: ('load_['token[T]], INPLST), AtS >
 => < plss : PLSS | state: readFile, input: INPLST, AtS >
    openFile(fileManager, plss, STR, "r")
  if STR := string(downQid(T)) .

 ***        OPENFILE         ***

 rl [openedFile] : openedFile(plss, fileManager, FHIn)
    < plss : PLSS | file: null, state: readFile, AtS >
 => < plss : PLSS | file: FHIn, state: readFile, AtS >
    getLine(FHIn, plss) .

 rl [readingModule] : gotLine(plss, FHIn, Text)
    < plss : PLSS | file: FHIn, out: Read, state: readFile, AtS >
 => if Text == ""
    then < plss : PLSS | file: FHIn, out: Read, state: readFile, AtS >
         closeFile(FHIn, plss)
    else < plss : PLSS | file: FHIn, out: (Read + Text), state: readFile, AtS >
         getLine(FHIn, plss)
    fi .

 ***       CLOSE FILE        ***

 rl [closedFile] : closedFile(plss, FHIn)
    < plss : PLSS | file: FHIn, state: readFile, AtS >
 => < plss : PLSS | file: null, state: parseModMetaparse, AtS > .

 ***       FILE PARSED       ***

 rl [parseModuleMetaparse] :
    < plss : PLSS | out: Read, state: parseModMetaparse, mi: MI, AtS >
 => < plss : PLSS | out: Read, state: parseList, mi: MI, AtS >
    parseTerm(MI, plss, 'GRAMMAR, none, tokenize(Read), '@Input@) .

 crl [parseModuleNoBubblesOK] :
     parsedTerm(plss, MI, {T, Ty})
     < plss : PLSS | out: Read, state: parseList, mi: MI, input: INPLST, AtS >
  => < plss : PLSS | out: "", state: executeComm, mi: MI, input: (TL, INPLST), AtS >
  if TL := extractTerms(T) .

 ***    FILE PARSE ERROR     ***

 crl [parseModuleNoBubblesError] :
     parsedTerm(plss, MI, noParse(N))
     < plss : PLSS | out: Read, state: parseList, mi: MI, AtS >
  => < plss : PLSS | out: "", state: print&executeComm, mi: MI, AtS >
     write(stdout, plss, printTokens(QIL))
  if QIL := showMsg(tokenize(Read), N) .


 ***                         ***
 ***          REDUCE         ***
 ***                         ***

 crl [redComm] :
     < plss : PLSS | state: executeComm, input: ('red_['bubble[T]], INPLST), module: M, AtS >
  => < plss : PLSS | state: print&executeComm, input: INPLST, module: M, AtS >
     write(stdout, plss, STR)
  if {T', Ty} := metaParse(M, downQidList(T), anyType) /\
     {T'', Ty'} := metaReduce(M, T') /\
     QIL := metaPrettyPrint(M, T'') /\
     STR := "\nResult: " + printTokens(QIL) + "\n" .


 ***                         ***
 ***         SOFTREW         ***
 ***                         ***

 crl [softrewComm] :
     < plss : PLSS | state: executeComm, input: ('softrew_['bubble[T]], INPLST), module: M, AtS >
  => < plss : PLSS | state: print&executeComm, input: INPLST, module: M, AtS >
     write(stdout, plss, STR)
  if {'__[DISH, ATTS], 'SoftDish} := metaParse(M, downQidList(T), 'SoftDish) /\
     T' := rewStrat(M, DISH, ATTS) /\
     QIL := metaPrettyPrint(M, T') /\
     STR := "\nResult: " + printTokens(QIL) + "\n" .



********  ZONA DE TRABAJO: BEGIN ******************
********  ZONA DE TRABAJO: BEGIN ******************
********  ZONA DE TRABAJO: BEGIN ******************


 op moduleQIL : -> QidList .
 eq moduleQIL = 'spec 'SOFTDISHSPEC1 '= 
                   'type 'Softdish '. 'type 'Dish '. 'type 'Attributes '.
                   'operator 'dish_:attributes_.
                   ': 'Dish 'Attributes '-> 'Softdish '.
                   'end .

 crl [loadComm] :
    < plss : PLSS | state: executeComm, input: ('load-spec_['token[T]], INPLST), 
                    spec: SDL, select-spec: MQ, AtS >
 => < plss : PLSS | state: foo, input: INPLST, 
                    spec: moduleQIL, select-spec: 'SOFTDISHSPEC1, AtS >
    write(stdout, plss, STR) 
  if STR := "\nResult: " + printTokens(moduleQIL) + "\n" .

 rl [foo] :
     < plss : PLSS | state: foo, AtS >
  => < plss : PLSS | state: print&executeComm, AtS >
     write(stdout, plss, "\n ESTUPENDO, LOAD-SPEC CARGO LA ESPECIFICACION.\n") .


***(
 ***                         ***
 ***      SOFTREW-SPEC       ***
 ***                         ***

 crl [softrewSpecComm] :
     < plss : PLSS | state: executeComm, input: ('softrew-spec_['bubble[T]], INPLST), module: M, 
                     spec: SDL, select-spec: MQ, AtS >
  => < plss : PLSS | state: print&executeComm, input: INPLST, module: M,
                     spec: SDL, select-spec: MQ, AtS >
     write(stdout, plss, STR)
---  if {'__[DISH, ATTS], 'SoftDish} := metaParse(M, downQidList(T), 'SoftDish) /\
  if {'______['SOFTDISHSPEC1, '|-, 'dish, DISH, ':attributes, ATTS], 'SoftDish} := metaParse(M, downQidList(T), 'SoftDish) /\
     T' := rewStrat(M, DISH, ATTS) /\
     QIL := metaPrettyPrint(M, T') /\
     STR := "\nResult: " + printTokens(QIL) + "\n" .

--- softrew-spec SOFTDISHSPEC1 |- dish PD({NUc | empty}) :attributes ([cdc6 = 1])
)

********  ZONA DE TRABAJO: END ******************
********  ZONA DE TRABAJO: END ******************
********  ZONA DE TRABAJO: END ******************


 ***                         ***
 ***          EXIT           ***
 ***                         ***

 rl [exit] :
    < plss : PLSS | state: executeComm, input: ('exit.@Command@), AtS >
 => write(stdout, plss, "Thanks for using PLSS!\n") [print AtS] .

 rl [quit] :
    < plss : PLSS | state: executeComm, input: ('q.@Command@), AtS >
 => write(stdout, plss, "Thanks for using PLSS!\n") .

 ***          ERROR          ***

 rl [parseCommError] :
    parsedTerm(plss, MI, noParse(N))
    < plss : PLSS | mi: MI, state: parseComm, AtS >
 => < plss : PLSS | mi: MI, state: print&idle, AtS >
    write(stdout, plss, "The introduced command does not exit.\n") .


 ***          CREATE         ***
 ***      METAINTERPRETER    ***

 rl [init-module] :
    createdInterpreter(plss, interpreterManager, MI)
    < plss : PLSS | state: init, load: module(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, mi: MI, load: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [init-view] :
    createdInterpreter(plss, interpreterManager, MI)
    < plss : PLSS | state: init, load: view(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, mi: MI, load: LP, AtS >
    insertView(MI, plss, upView(Q)) .

 rl [load-predef-module-from-module] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-std-db, load: module(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [load-predef-view-from-module] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-std-db, load: view(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertView(MI, plss, upView(Q)) .

 rl [load-predef-module-from-view] :
    insertedView(plss, MI)
    < plss : PLSS | state: load-std-db, load: module(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [load-predef-view-from-view] :
    insertedView(plss, MI)
    < plss : PLSS | state: load-std-db, load: view(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertView(MI, plss, upView(Q)) .

 rl [load-predef-finished] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-std-db,  load: nil, AtS > 
 => < plss : PLSS | state: load-grammar, load: nil, AtS >
    insertModule(MI, plss, GRAMMAR) .

 rl [load-grammar-finished] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-grammar, AtS >
 => < plss : PLSS | state: load-user-mi, AtS >
    createInterpreter(interpreterManager, plss, none) .


 rl [user-metainterpreter-created] :
    createdInterpreter(plss, interpreterManager, MI)
    < plss : PLSS | state: load-user-mi, uload: module(Q) LP, AtS >
 => < plss : PLSS | state: load-user-mods, umi: MI, uload: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [load-user-predef-module-metainterpreter] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-user-mods, uload: module(Q) LP, AtS >
 => < plss : PLSS | state: load-user-mods, uload: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [user-predef-module-metainterpreter-finished] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-user-mods, uload: nil, AtS >
 => < plss : PLSS | state: idle, AtS >
    getLine(stdin, plss, "PLSS> ") .

 ***                         ***
 ***          RUN            ***
 ***                         ***

 eq run =
    <> < plss : PLSS | file: null, out: "", state: init, db: empty,
              load: modList, uload: umodList, current: noQid,
              parsModName: noQid, bubbles: empty, top: noMod,
              input: empty, module: userModule, spec: noSpec, select-spec: noQid >
    createInterpreter(interpreterManager, plss, none) .
endm

set print conceal on .
print conceal module:_ .

set print attribute on .
set show advisories on .

erew run .

*************************************************
eof

