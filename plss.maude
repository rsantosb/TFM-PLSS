
**************************************

load metaInterpreter.maude
load parsing.maude
load grammar.maude
load file.maude
load plallSS.maude
load parsing-command.maude

**************************************

mod PLSS is
 pr (MAYBE * (op maybe to noMod)){Module} .
 pr (MAYBE * (op maybe to noQid)){Qid} .
 pr (MAYBE * (op maybe to null)){Oid} .
 pr COMMAND-PROCESSING .
 inc META-INTERPRETER .
 pr META-PLSS-SIGN .
 pr PRELOAD-LIST .
 inc STD-STREAM .
 pr ERROR-MSGS .
 pr SOFT-SET-FUN .
 inc FILE .

 vars Text Read STR : String .
 vars TL IN INPLST ATTS : TermList .
 vars T T' T'' DISH T1 T1' T2 : Term .
 vars FHIn MI : Oid .
 var  AtS : AttributeSet .
 var  LP : List{Preload} .
 var QIL : QidList .
 vars QIL1 QIL2 QIL3 QIL4 : QidList .
 var M : Module .
 var  MQ : Maybe{Qid} .
 vars Ty Ty' T1y : Type .
 var  Q : Qid .
 var  N : Nat .

 sort State .
 *** Initial state, metainterpreter is created
 op init : -> State [ctor] .
 *** Loading from standard database
 op load-std-db : -> State [ctor] .
 *** Loading grammar
 op load-grammar : -> State [ctor] .
 *** Create user metainterpreter
 op load-user-mi : -> State [ctor] .
 *** Load modules into user metainterpreter
 op load-user-mods : -> State [ctor] .
 *** Waiting input from the user
 op idle : -> State [ctor] .
 *** Reading file
 op readFile : -> State [ctor] .
 *** Parsing Module - metaparse
 op parseModMetaparse : -> State [ctor] .
 *** Parsing - create module list
 op parseList : -> State [ctor] . 
 *** Parsing command
 op parseComm : -> State [ctor] .
 *** Execute command
 op executeComm : -> State [ctor] .
 *** Waits for a wrote msg and returns to idle with getLine
 op print&idle : -> State [ctor] . 
 *** Waits for a wrote msg and keeps executing commands.
 op print&executeComm : -> State [ctor] .


 *** Object and class definition
 op PLSS : -> Cid .
 op plss : -> Oid .


 *** Attributes
 op uload:_ : List{Preload} -> Attribute [ctor gather (&)] .
 op load:_ : List{Preload} -> Attribute [ctor gather (&)] .
 op module:_ : Maybe{Module} -> Attribute [ctor] .
 op file:_ : Maybe{Oid} -> Attribute [ctor] .
 op input:_ : TermList -> Attribute [ctor] .
 op state:_ : State -> Attribute [ctor] .
 op out:_ : String -> Attribute [ctor] .
 op umi:_ : Oid -> Attribute [ctor] .
 op mi:_ : Oid -> Attribute [ctor] .
 op strat:_ : Maybe{Qid} -> Attribute [ctor] .


 *** Initial value for loading into the parsing metainterpreter
 op modList : -> List{Preload} .
 eq modList = module('TRUTH-VALUE) module('BOOL-OPS) module('TRUTH)
					    module('BOOL) module('EXT-BOOL) module('NAT) module('RANDOM)
					    module('COUNTER) module('INT) module('RAT) module('FLOAT)
					    module('STRING) module('CONVERSION) module('BOUND) module('QID)
					    view('Qid) module('TRIV) view('TRIV) module('LIST) module('QID-LIST)
					    module('COMMON-SIGN) module('COMMAND-SIGN) module('PLSS-SIGN) .

 *** Initial value for loading into the user metainterpreter
 op umodList : -> List{Preload} .
 eq umodList = module('TRUTH-VALUE) module('BOOL-OPS) module('TRUTH) module('BOOL)
						  module('NAT) module('TRIV)  .


 *** Initial value for loading into the user module
 op qModule : -> Qid .
 eq qModule = 'QQ1 .
 op userModule : -> FModule .
 eq userModule = putNarrowingAtt(upModule(qModule, true)) .


 ***      PARSE COMMAND      ***

 rl [parseComm] : gotLine(plss, stdin, Text)
    < plss : PLSS | mi: MI, state: idle, AtS >
 => < plss : PLSS | mi: MI, state: parseComm, AtS >
    parseTerm(MI, plss, 'GRAMMAR, none, tokenize(Text), '@Input@) .

 crl [parseComm] :
     parsedTerm(plss, MI, {T, Ty})
     < plss : PLSS | mi: MI, state: parseComm, input: IN, AtS >
  => < plss : PLSS | mi: MI, state: executeComm, input: TL, AtS >
  if TL := extractTerms(T) .


 ***          EMPTY          ***

 rl [emptyCommList] :
    < plss : PLSS | state: executeComm, input: empty, AtS >
 => < plss : PLSS | state: idle, input: empty, AtS >
    getLine(stdin, plss, "PLSS> ") .


 ***    PRINT & CONTINUE     ***

 rl [print&idle] : wrote(plss, stdout)
    < plss : PLSS | state: print&idle, AtS >
 => < plss : PLSS | state: idle, AtS >
    getLine(stdin, plss, "PLSS> ") .

 rl [print&executeComm] : wrote(plss, stdout)
    < plss : PLSS | state: print&executeComm, AtS >
 => < plss : PLSS | state: executeComm, AtS > .


 ***		 			                         ***
 ***		   	    LOAD                   ***
 ***		 			                         ***

 crl [loadComm] :
    < plss : PLSS | state: executeComm, input: ('load_['token[T]], INPLST), AtS >
 => < plss : PLSS | state: readFile, input: INPLST, AtS >
    openFile(fileManager, plss, STR, "r")
  if STR := string(downQid(T)) .


 ***        OPENFILE         ***

 rl [openedFile] : openedFile(plss, fileManager, FHIn)
    < plss : PLSS | file: null, state: readFile, AtS >
 => < plss : PLSS | file: FHIn, state: readFile, AtS >
    getLine(FHIn, plss) .

 rl [readingModule] : gotLine(plss, FHIn, Text)
    < plss : PLSS | file: FHIn, out: Read, state: readFile, AtS >
 => if Text == ""
    then < plss : PLSS | file: FHIn, out: Read, state: readFile, AtS >
         closeFile(FHIn, plss)
    else < plss : PLSS | file: FHIn, out: (Read + Text), state: readFile, AtS >
         getLine(FHIn, plss)
    fi .

 ***       CLOSE FILE        ***

 rl [closedFile] : closedFile(plss, FHIn)
    < plss : PLSS | file: FHIn, state: readFile, AtS >
 => < plss : PLSS | file: null, state: parseModMetaparse, AtS > .

 ***       FILE PARSED       ***

 rl [parseModuleMetaparse] :
    < plss : PLSS | out: Read, state: parseModMetaparse, mi: MI, AtS >
 => < plss : PLSS | out: Read, state: parseList, mi: MI, AtS >
    parseTerm(MI, plss, 'GRAMMAR, none, tokenize(Read), '@Input@) .

 crl [parseModuleNoBubblesOK] :
     parsedTerm(plss, MI, {T, Ty})
     < plss : PLSS | out: Read, state: parseList, mi: MI, input: INPLST, AtS >
  => < plss : PLSS | out: "", state: executeComm, mi: MI, input: (TL, INPLST), AtS >
  if TL := extractTerms(T) .

 ***    FILE PARSE ERROR     ***

 crl [parseModuleNoBubblesError] :
     parsedTerm(plss, MI, noParse(N))
     < plss : PLSS | out: Read, state: parseList, mi: MI, AtS >
  => < plss : PLSS | out: "", state: print&executeComm, mi: MI, AtS >
     write(stdout, plss, printTokens(QIL))
  if QIL := showMsg(tokenize(Read), N) .


 ***		 			                         ***
 ***			   REDUCE              ***
 ***		 			                         ***

 crl [redComm] :
     < plss : PLSS | state: executeComm, input: ('red_['bubble[T]], INPLST), module: M, AtS >
  => < plss : PLSS | state: print&executeComm, input: INPLST, module: M, AtS >
     write(stdout, plss, STR)
  if {T', Ty} := metaParse(M, downQidList(T), anyType) /\   *** 'SoftDish
     {T'', Ty'} := metaReduce(M, T') /\
     QIL := metaPrettyPrint(M, T'') /\
     STR := "\nResult: " + printTokens(QIL) + "\n" .


 ***		 			                         ***
 ***		 LOADSTRAT             ***
 ***		 			                         ***

 crl [loadstratComm] :
    < plss : PLSS | state: executeComm, input: ('loadstrat_['token[T]], INPLST), strat: MQ, AtS >
 => < plss : PLSS | state: print&executeComm, input: INPLST, strat: downQid(T), AtS >
     write(stdout, plss, STR)
  if STR := "\nLoaded strategy function ( " +  string(downQid(T)) + " )\n" .


 ***		 			                         ***
 ***	 SOFTREW (STRAT)     ***
 ***		 			                         ***

 crl [softrewstratComm] :
     < plss : PLSS | state: executeComm, input: ('softrew_['bubble[T]], INPLST), module: M, strat: MQ, AtS >
  => < plss : PLSS | state: print&executeComm, input: INPLST, module: M, strat: MQ, AtS >
     write(stdout, plss, STR)
  if {'__[DISH, ATTS], 'SoftDish} := metaParse(M, downQidList(T), 'SoftDish) /\
     T' := rewStrat(M, '__[DISH, ATTS], getNames(ATTS), MQ) /\
     QIL := metaPrettyPrint(M, T') /\
     STR := "\nResult softrew: " + printTokens(QIL) + "\n" .

 ***							 		                    ***
 ***	  SOFTNARROW (STRAT)   	***
 ***		 			                        			***

 crl [softnarrowstratComm] :
     < plss : PLSS | state: executeComm, input: ('softnarrow_['bubble[T]], INPLST), module: M, strat: MQ, AtS >
  => < plss : PLSS | state: print&executeComm, input: INPLST, module: M, strat: MQ, AtS >
     write(stdout, plss, STR)
  if {'__[DISH, ATTS], 'SoftDish} := metaParse(M, downQidList(T), 'SoftDish) /\
     T' := narrowStrat(M, '__[DISH, ATTS], getNames(ATTS), MQ) /\
     QIL := metaPrettyPrint(M, T') /\
     STR := "\nResult softnarrow: " + printTokens(QIL) + "\n" .

 op getNames : Term -> TermList .
 eq getNames('_`,_[TL]) = getNames*(TL) .
 eq getNames('`[_=_`][T1, T2]) = T1 .

 op getNames* : TermList -> TermList .
 eq getNames*(empty) = empty .
 eq getNames*((T, TL)) = getNames(T), getNames*(TL) .


 ***		 			                         					***
 ***	SOFT-NARROWING-SEARCH     	***
 ***		 			                         					***

 *** Caso de error de parseo en los argumentos de entrada del metaNarrowingSearch
	crl [softNarrowSearchComm] :
		< plss : PLSS | state: executeComm, input: ('softnarrowsearch__['bubble[T], 'bubble[T1]], INPLST), module: M, AtS >
	=> < plss : PLSS | state: print&executeComm, input: INPLST, module: M, AtS >
		write(stdout, plss, STR)
	if (not (metaParse(M, downQidList(T), 'SoftDish) :: ResultPair) or 
	   not (metaParse(M, downQidList(T1), 'SoftDish) :: ResultPair)) /\
	   STR := "\nError en los t√©rminos parseados para MetaNarrowingSearch.\n\n" .

 *** Caso de no encontrar solucion con metaNarrowingSearch
	crl [softNarrowSearchComm] :
		< plss : PLSS | state: executeComm, input: ('softnarrowsearch__['bubble[T], 'bubble[T1]], INPLST), module: M, AtS >
	=> < plss : PLSS | state: print&executeComm, input: INPLST, module: M, AtS >
		write(stdout, plss, STR)
	if  {T', Ty} := metaParse(M, downQidList(T), 'SoftDish) /\  *** SoftDish, anyType
		{T1', T1y} := metaParse(M, downQidList(T1), 'SoftDish) /\
		not (metaNarrowingSearch(putNarrowingAtt(M), T', T1', '*, unbounded, 'none, 0) :: NarrowingSearchResult) /\
		STR := "\nNo soluci√≥n en la b√∫squeda con MetaNarrowingSearch.\n\n" .

 *** Caso de encontrar solucion con metaNarrowingSearch
	crl [softNarrowSearchComm] :
		< plss : PLSS | state: executeComm, input: ('softnarrowsearch__['bubble[T], 'bubble[T1]], INPLST), module: M, AtS >
	=> < plss : PLSS | state: print&executeComm, input: INPLST, module: M, AtS >
		write(stdout, plss, STR)
	if  {T', Ty} := metaParse(M, downQidList(T), 'SoftDish) /\
		{T1', T1y} := metaParse(M, downQidList(T1), 'SoftDish) /\
		metaNarrowingSearch(putNarrowingAtt(M), T', T1', '*, unbounded, 'none, 0) :: NarrowingSearchResult /\
		{T'', 'SoftDish, VSubs:Substitution, VQid:Qid, VSubs2:Substitution, VQid2:Qid } :=
			metaNarrowingSearch(putNarrowingAtt(M), T', T1', '*, unbounded, 'none, 0) /\
		QIL := metaPrettyPrint(M, T'') /\
		QIL1 := printSB(M, VSubs:Substitution) /\
		QIL2 := printSB(M, VSubs2:Substitution) /\
		QIL3 := metaPrettyPrint(M, T') /\
		QIL4 := metaPrettyPrint(M, T1') /\
		STR := "\nResult softnarrowsearch (SoftDish-term): " + printTokens(QIL) +
			"\nSubstitution1: " + printTokens(QIL1) +
			"\nSubstitution2: " + printTokens(QIL2) +
			"\nTerm-ini (T): " + printTokens(QIL3) +
			"\nTerm-patron (T1): " + printTokens(QIL4) + "\n\n" .


 ***		 			                         ***
 ***		 LOADMODULE	 	 ***
 ***		 			                         ***

 crl [loadmoduleComm] :
    < plss : PLSS | state: executeComm, input: ('loadmodule_['token[T]], INPLST), module: M, AtS >
 => < plss : PLSS | state: print&executeComm, input: INPLST, module: putNarrowingAtt(upModule(downQid(T), true)), AtS >
     write(stdout, plss, STR)
  if STR := "\nLoaded Pathway Logic module ( " +  string(downQid(T)) + " )\n" .


 ***		 			                         ***
 ***		EXIT QUIT HELP       ***
 ***		 			                         ***

 rl [exit] :
    < plss : PLSS | state: executeComm, input: ('exit.@Command@), AtS >
 => write(stdout, plss, "\nThanks for using PLSS!\n") .
 
 rl [quit] :
    < plss : PLSS | state: executeComm, input: ('q.@Command@), AtS >
 => write(stdout, plss, "\nThanks for using PLSS!\n") .
 
 rl [help] :
    < plss : PLSS | state: executeComm, input: ('help.@Command@, INPLST), AtS >
 => < plss : PLSS | state: print&executeComm, input: INPLST, AtS >
    write(stdout, plss, help + "\n") .


 op help : -> String .
 eq help = 
  "\n   ======================== \n" +
  "   AYUDA DEL PROGRAMA: PLSS\n" +
  "   ========================\n\n" +

  "   1. load + ( Fichero de texto ): \n" +
  "      Carga el fichero y ejecuta los comandos incluidos en el fichero. \n" +
  "      Cuando exista m√°s de una instrucci√≥n, cada una deber√° estar \n" +
  "      entre par√©ntesis. \n" +
  "      Ejemplo: \n" +
  "      PLSS> load softsetfile.txt \n" +
  "       \n" +
  "   2. loadstrat + ( Estrategia ): \n" +
  "      Permite cargar una funci√≥n de estrategia para los comandos de simplificaci√≥n.\n" +
  "      Entre ellas se encuentran las funciones:\n" +
  "      - undefZero, undefOne, undefSemi, undefWRow y undefWCol. \n" +
  "      Ejemplos: \n" +
  "      PLSS> loadstrat undefSemi \n" +
  "      PLSS> loadstrat undefWRow \n" +
  "      PLSS> loadstrat undefOne \n" +
  "       \n" +
  "   3. loadmodule + ( Modelo biol√≥gico ): \n" +
  "      Permite cargar un modelo biol√≥gico para los comandos de simplificaci√≥n y b√∫squeda.\n" +
  "      Entre ellos se encuentran:\n" +
  "      - QQ1: Modelo TGFB1, QQ2: Modelo EGF, QQ3: Modelo HGF, QQ4: Modelo IL6 y QQ5: Modelo NGF. \n" +
  "      Ejemplos: \n" +
  "      PLSS> loadmodule QQ1 \n" +
  "      PLSS> loadmodule QQ2 \n" +
  "      PLSS> loadmodule QQ5 \n" +
  "       \n" +
  "   4. red + ( T√©rmino ): \n" +
  "      Reduce el t√©rmino para la simplificaci√≥n ecuacional. \n" +
  "      Ejemplos: \n" +
  "      PLSS> red Tgfb1Dish \n" +
  "      PLSS> red (Tgfb1Dish  ([cdkn2b = *])) \n" +
  "      PLSS> red (PD({CLc | empty})  ([cdc6 = 0])) \n" +
  "      PLSS> red (atts(Tgfb1Dish  ([cdc6 = 0]))) \n" +
  "       \n" +
  "   5. softrew + ( T√©rmino SoftDish ): \n" +
  "      Reescribe el t√©rmino con soft reglas. \n" +
  "      Ejemplos: \n" +
  "      PLSS> softrew (SmallDish ([cdc6 = 0])) \n" +
  "      PLSS> softrew (PD({CLc | empty})  ([cdc6 = 0])) \n" +
  "       \n" +
  "   6. softnarrow + ( T√©rmino SoftDish ): \n" +
  "      Reescribe el t√©rmino para la simplificaci√≥n de la b√∫squeda mediante narrowing. \n" +
  "      Ejemplos: \n" +
  "      PLSS> softnarrow (TinyDish1  ([cdc6 = 0])) \n" +
  "      PLSS> softnarrow (PD({CLc | empty})  ([cdc6 = 0])) \n" +
  "       \n" +
  "   7. softnarrowsearch + ( T√©rmino SoftDish inicial ) ( T√©rmino SoftDish patr√≥n ): \n" +
  "      Se encarga de realizar el an√°lisis con narrowing (estrechamiento).\n" +
  "      Ejemplos: \n" +
  "      PLSS> softnarrowsearch ( manolito ) ( pepito ) \n" +
  "      PLSS> softnarrowsearch (TinyDish1 ([cdc6 = 0])) (TinyDish2 ([cdc6 = 0])) \n" +
  "      PLSS> softnarrowsearch (SD:SoftDish) (PD({XOut | Tgfb1}) ([cdc6 = 1])) \n" +
  "       \n" +
  "   8. exit / q: \n" +
  "      Abandona la ejecuci√≥n del programa. \n" +
  "      Ejemplos: \n" +
  "      PLSS> exit \n" +
  "      PLSS> q \n" +
  "       \n" +
  "   9. help: \n" +
  "      Ayuda del programa. \n" +
  "      Ejemplo: \n" +
  "      PLSS> help \n" .


 ***          ERROR          ***

 rl [parseCommError] :
    parsedTerm(plss, MI, noParse(N))
    < plss : PLSS | mi: MI, state: parseComm, AtS >
 => < plss : PLSS | mi: MI, state: print&idle, AtS >
    write(stdout, plss, "The introduced command does not exit.\n") .


 ***		 			                         ***
 ***		 	   CREATE              ***
 ***	METAINTERPRETER   ***
 ***		 			                         ***

 rl [init-module] :
    createdInterpreter(plss, interpreterManager, MI)
    < plss : PLSS | state: init, load: module(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, mi: MI, load: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [init-view] :
    createdInterpreter(plss, interpreterManager, MI)
    < plss : PLSS | state: init, load: view(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, mi: MI, load: LP, AtS >
    insertView(MI, plss, upView(Q)) .

 rl [load-predef-module-from-module] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-std-db, load: module(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [load-predef-view-from-module] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-std-db, load: view(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertView(MI, plss, upView(Q)) .

 rl [load-predef-module-from-view] :
    insertedView(plss, MI)
    < plss : PLSS | state: load-std-db, load: module(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [load-predef-view-from-view] :
    insertedView(plss, MI)
    < plss : PLSS | state: load-std-db, load: view(Q) LP, AtS >
 => < plss : PLSS | state: load-std-db, load: LP, AtS >
    insertView(MI, plss, upView(Q)) .

 rl [load-predef-finished] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-std-db,  load: nil, AtS > 
 => < plss : PLSS | state: load-grammar, load: nil, AtS >
    insertModule(MI, plss, GRAMMAR) .

 rl [load-grammar-finished] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-grammar, AtS >
 => < plss : PLSS | state: load-user-mi, AtS >
    createInterpreter(interpreterManager, plss, none) .

 rl [user-metainterpreter-created] :
    createdInterpreter(plss, interpreterManager, MI)
    < plss : PLSS | state: load-user-mi, uload: module(Q) LP, AtS >
 => < plss : PLSS | state: load-user-mods, umi: MI, uload: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [load-user-predef-module-metainterpreter] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-user-mods, uload: module(Q) LP, AtS >
 => < plss : PLSS | state: load-user-mods, uload: LP, AtS >
    insertModule(MI, plss, upModule(Q, false)) .

 rl [user-predef-module-metainterpreter-finished] :
    insertedModule(plss, MI)
    < plss : PLSS | state: load-user-mods, uload: nil, AtS >
 => < plss : PLSS | state: idle, AtS >
    getLine(stdin, plss, "PLSS> ") .


 ***		 			                     ***
 ***		 		RUN                 ***
 ***		 			                     ***

 *** Run command
 op run : -> Configuration [ctor] .
 eq run =
    <> < plss : PLSS | file: null, out: "", state: init, input: empty, load: modList, uload: umodList, module: userModule, strat: 'undefZero >
    createInterpreter(interpreterManager, plss, none) .

endm

**************************************
**************************************

set print conceal on .
print conceal module:_ .

set print attribute on .
set show advisories on .

erew run .

**************************************
**************************************

eof

**************************************
**************************************
