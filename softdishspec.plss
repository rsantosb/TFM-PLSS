spec! LIST =
 rigid sort List .
end

spec! MySoftdish{X :: TRIV} =
  pr LIST .
  inc BOOL .
  --- pr SOFTSET .   --- a√±adido por nosotros

  rigid sort Elt .
  subsort Elt < List .
  nominal sort Mode .

  vars E E1 : Elt .
  var  M : Mode .
  vars L L' : List .

  op init : -> Mode [ctor] .
  op next : Mode -> Mode [ctor] .

  op empty : -> List [ctor] .
  op _._ : Elt List -> List [ctor] .

  pred open .
  pred equal : Elt Elt [comm] .

  flexible op read_ : List -> Elt .
  flexible op read2 : List -> Elt .

  op head : List -> Elt .
  eq head(E . L) = E .
  ceq head(E . L) = E
   if L = empty /\
      L = empty .

  eq @ init read (E . L) = E .
  eq @ init read2 (E . L) = E .

  eq @ next(M) read (E . L) = E .
  eq forall L L' exists E E1 . @ next(M) read (E . L') = E .
  eq forall L L' . @ next(M) read (E . L') = E .

end

*** goal MySoftdish >> eq forall E exists E1 . read (E . L) = E .
*** softdishselect MySoftdish >> dish PD({NUc | empty}) . attributes ([cdc6 = 0], [cdkn1a = 0]) .

