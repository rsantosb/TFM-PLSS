fmod COMMAND-PROCESSING is
 pr QUANTIFICATION-OPS .
 pr PARSING-RESULT .
 pr META-LEVEL .
 pr LEXICAL .

 vars RIG RIG' NOM NOM' FLE FLE' SS : SortSet .
 vars M M' M'' TOP TOP' FLAT FLAT' : Module .
 vars VS VS' UV UV' EV EV' : VariableSet .
 vars T T' T'' T1 T2 T3 T4 TQ : Term .
 vars QIL QIL' ERR ERR' : QidList .
 vars PL PL' : ParameterDeclList .
 vars TL TL' ACC : TermList .
 var  SSDS : SubsortDeclSet .
 var  RP? : [ResultPair] .
 var  COND : Condition .
 var  PR : ParsingRes .
 var  ODS : OpDeclSet .
 var  TyL : TypeList .
 vars Ty Ty' : Type .
 var  AtS : AttrSet .
 var  DB : Database .
 vars S S' : String .
 var  Eq : Equation .
 vars Q Q' FQ : Qid .
 var  V : Variable .
 var  OP : OpDecl .
 var  I : Import .
 var  Srt : Sort .
 var  H : Header .
 var  N : Nat .


 op parseModule : Term -> ParsingRes .
 ceq parseModule('spec!_=_end[T,T']) = parseNoBubbles(M, T')
  if H := parseHeader(T) /\
     M := emptyModule(H) .
 ceq parseModule('spec*_=_end[T,T']) = parseNoBubbles(M, T')
  if H := parseHeader(T) /\
     M := emptyTheory(H) .

 op parseNoBubbles : Module Term -> ParsingRes .
 ceq parseNoBubbles(M, '__[T, T']) = [M'', (TL, TL'),
                                      < (RIG ; RIG'), (NOM ; NOM'), (FLE ; FLE') >, ERR ERR' ]
  if [M', TL, < RIG, NOM, FLE >, ERR] := parseDefNoBubble(M, T) /\
     [M'', TL', < RIG', NOM', FLE' >, ERR'] := parseNoBubbles(M', T') .
 eq parseNoBubbles(M, T) = parseDefNoBubble(M, T) .

 op parseDefNoBubble : Module Term -> ParsingRes .
 ***(
           PARSING IMPORTATION DECLARATIONS
 )
 ceq parseDefNoBubble(M, 'pr_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := protecting Q . /\
     M' := addImports(M, I) .
 ceq parseDefNoBubble(M, 'ex_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := extending Q . /\
     M' := addImports(M, I) .
 ceq parseDefNoBubble(M, 'inc_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := including Q . /\
     M' := addImports(M, I) .
 ***(
           PARSING SORT DECLARATIONS
 )
 ceq parseDefNoBubble(M, 'rigid`sort_.['neTokenList[T]]) = [M', empty, < SS, none, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ceq parseDefNoBubble(M, 'rigid`sorts_.['neTokenList[T]]) = [M', empty, < SS, none, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ceq parseDefNoBubble(M, 'nominal`sort_.['neTokenList[T]]) = [M'', empty, < none, SS, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) /\
     SSDS := genSubsortNominal(SS) /\
     M'' := addSubsorts(M', SSDS) .
 ceq parseDefNoBubble(M, 'nominal`sorts_.['neTokenList[T]]) = [M'', empty, < none, SS, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) /\
     SSDS := genSubsortNominal(SS) /\
     M'' := addSubsorts(M', SSDS) .
 ceq parseDefNoBubble(M, 'sort_.['neTokenList[T]]) = [M', empty, < none, none, SS >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ceq parseDefNoBubble(M, 'sorts_.['neTokenList[T]]) = [M', empty, < none, none, SS >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ***(
          SUBSORTS, OPERATORS, EQUATIONS, AND VARIABLES ARE PARSED LATED.
          It makes sense because they might need sorts, kinds, and operators from imported modules
          and parameters.
 )
 eq parseDefNoBubble(M, T) = [M, T, < none, none, none >, nil ] [owise] . *** TODO!!!

 op parseArity : Term -> TypeList .
 eq parseArity('__[TL]) = parseArity*(TL) .
 eq parseArity(T) = downQid(T) [owise] .

 op parseArity* : TermList -> TypeList .
 eq parseArity*((T, TL)) = downQid(T) parseArity*(TL) .
 eq parseArity*(empty) = nil .

 op parseSortList : Term -> SortSet .
 eq parseSortList('__[TL]) = parseSortList*(TL) .
 eq parseSortList(T) = downQid(T) [owise] .

 op parseSortList* : TermList -> SortSet .
 eq parseSortList*((T, TL)) = downQid(T) ; parseSortList*(TL) .
 eq parseSortList*(empty) = none .

 op genSubsortNominal : SortSet -> SubsortDeclSet .
 eq genSubsortNominal(none) = none .
 eq genSubsortNominal(Srt ; SS) = subsort Srt < '@Nominal@ . genSubsortNominal(SS) .

 op parseAttr : Module Term -> AttrSet .
 eq parseAttr(M, '__[TL]) = parseAttr*(M, TL) .
 eq parseAttr(M, 'ctor.@Attr@) = ctor .
 eq parseAttr(M, 'iter.@Attr@) = iter .
 eq parseAttr(M, 'assoc.@Attr@) = assoc .
 eq parseAttr(M, 'comm.@Attr@) = comm .
 eq parseAttr(M, 'idem.@Attr@) = idem .
 eq parseAttr(M, 'memo.@Attr@) = memo .
 eq parseAttr(M, 'id:_['bubble[T]]) = memo . *** TODO

 op parseAttr* : Module TermList -> AttrSet .
 eq parseAttr*(M, empty) = none .
 eq parseAttr*(M, (T, TL)) = parseAttr(M, T) parseAttr*(M, TL) .

 ***(
 ops id:_ : @Bubble@ -> @Attr@ .
 op prec_ : @Token@ -> @Attr@ .
 op metadata_ : @Token@ -> @Attr@ .
 )

***(
      Header
)
 op parseHeader : Term -> Header .
 ceq parseHeader('token[T]) = Q
  if Q := downQid(T) .
 ceq parseHeader('_`{_`}['token[T], T']) = Q{PL}
  if Q := downQid(T) /\
     PL := parsePL(T') .

 op parsePL : Term -> ParameterDeclList .
 ceq parsePL('_`,_[T, T']) = PL, PL'
  if PL := parsePL(T) /\
     PL' := parsePL(T') .
 ceq parsePL('_::_['token[T], 'token[T']]) = Q :: Q'
  if Q := downQid(T) /\
     Q' := downQid(T') .

 *** Top module, Flat module, Vars and equations
 op parseBubbles : Module Module TermList -> ParsingRes .
 eq parseBubbles(TOP, FLAT, TL) = parseBubbles(TOP, FLAT, none, TL, empty) .

 ***(
             PARSE VARIABLES
 )
 *** Top module, Flat module, VariableSet, Vars and equations, Acc
 op parseBubbles : Module Module VariableSet TermList TermList -> ParsingRes .
 eq parseBubbles(TOP, FLAT, VS, empty, ACC) = parseEqs(TOP, FLAT, VS, ACC) .
 ceq parseBubbles(TOP, FLAT, VS, ('var_:_.['neTokenList[T],'token[T']], TL), ACC) =
                             parseBubbles(TOP, FLAT, VS ; VS', TL, ACC)
  if VS' := parseVars(T, T') .
 ceq parseBubbles(TOP, FLAT, VS, ('vars_:_.['neTokenList[T],'token[T']], TL), ACC) =
                             parseBubbles(TOP, FLAT, VS ; VS', TL, ACC)
  if VS' := parseVars(T, T') .
 ***(
           PARSING SUBSORT DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('subsort_<_.['neTokenList[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if SS := parseSortList(T) /\
     Ty := downQid(T') /\
     SSDS := createSubsortDecls(SS, Ty) /\
     TOP' := addSubsorts(TOP, SSDS) /\
     FLAT' := addSubsorts(FLAT, SSDS) .
 ***(
           PARSING OP DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`->_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     OP := op Q : nil -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`->_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, T'') /\
     OP := op Q : nil -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_->_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     TyL := parseArity(T') /\
     Q' := downQid(T'') /\
     OP := op Q : TyL -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_->_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T1) /\
     TyL := parseArity(T2) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, T4) /\
     OP := op Q : TyL -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ***(
           PARSING PARTIAL OP DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`~>_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     OP := op Q : nil -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`~>_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, T'') /\
     OP := op Q : nil -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_~>_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     TyL := parseArity(T') /\
     Q' := downQid(T'') /\
     OP := op Q : toKind(FLAT, TyL) -> toKind(FLAT, Q') [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_~>_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T1) /\
     TyL := parseArity(T2) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, T4) /\
     OP := op Q : toKind(FLAT, TyL) -> toKind(FLAT, Q') [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ***(
           PARSING FLEXIBLE OP DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:`->_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     FQ := createFlexOpName(Q, nil) /\
     Q' := downQid(T') /\
     ODS := (op FQ : '@Nominal@ -> Q' [none] .
             op Q : nil -> Q' [none] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) .
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:`->_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                               parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     FQ := createFlexOpName(Q, nil) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, T'') /\
     ODS := (op FQ : '@Nominal@ -> Q' [AtS] .
             op Q : nil -> Q' [AtS] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) .
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:_->_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                               parseBubbles(TOP', FLAT', VS, TL, ACC)
  if TyL := parseArity(T') /\
     Q := downQid(T) /\
     FQ := createFlexOpName(Q, TyL) /\
     Q' := downQid(T'') /\
     ODS := (op FQ : '@Nominal@ TyL -> Q' [none] .
             op Q : TyL -> Q' [none] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) .
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:_->_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                               parseBubbles(TOP', FLAT', VS, TL, ACC)
  if TyL := parseArity(T2) /\
     Q := downQid(T1) /\
     FQ := createFlexOpName(Q, TyL) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, T4) /\
     ODS := (op FQ : '@Nominal@ TyL -> Q' [AtS] .
             op Q : TyL -> Q' [AtS] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) .

 ***(
           PARSING PREDICATES
 )
 eq parseBubbles(TOP, FLAT, VS, ('pred_.[T], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:`->_.[T,'token[''Bool.Qid]], TL), ACC) .

 eq parseBubbles(TOP, FLAT, VS, ('pred_`[_`].['token[T],T''], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:`->_`[_`].['token[T],'token[''Bool.Qid], T''], TL), ACC) .
 eq parseBubbles(TOP, FLAT, VS, ('pred_:_.['token[T],'neTokenList[T']], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:_->_.['token[T],'neTokenList[T'],'token[''Bool.Qid]], TL), ACC) .
 eq parseBubbles(TOP, FLAT, VS, ('pred_:_`[_`].['token[T1],'neTokenList[T2],T4], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:_->_`[_`].['token[T1],'neTokenList[T2],'token[''Bool.Qid], T4], TL), ACC) .
 ***(
             OWISE
 )
 eq parseBubbles(TOP, FLAT, VS, (T, TL), ACC) = parseBubbles(TOP, FLAT, VS, TL, (ACC, T)) [owise] .

 ***(
             PARSE EQUATIONS
 )
 op parseEqs : Module Module VariableSet TermList -> ParsingRes .
 eq parseEqs(TOP, FLAT, VS, empty) = [TOP, VS, nil] .
 ceq parseEqs(TOP, FLAT, VS, (T, TL)) = parseEqs(M, FLAT, VS, TL)
  if Eq := parseEq(FLAT, VS, T) /\
     M := addEqs(TOP, Eq) .

 op parseEq : Module VariableSet Term -> Equation .
 ceq parseEq(M, VS, 'eq_=_.['bubble[T], 'bubble[T']]) = eq T1 = T2 [none] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) .
 op parseEq : Module VariableSet Term -> Equation .
 ceq parseEq(M, VS, 'eq_._=_.[TQ, 'bubble[T], 'bubble[T']]) = eq T1 = T2 [AtS] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) /\
     < UV, EV > := extractQuantVars(TQ, VS) /\
     AtS := generateQuantificationAtts(UV, EV) .
 ceq parseEq(M, VS, 'ceq_=_if_.['bubble[T], 'bubble[T'],T'']) = ceq T1 = T2 if COND [none] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) /\
     COND := parseCondition(M, T'', VS) .
 ceq parseEq(M, VS, 'ceq_._=_if_.[TQ, 'bubble[T], 'bubble[T'],T'']) = ceq T1 = T2 if COND [AtS] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) /\
     COND := parseCondition(M, T'', VS) /\
     < UV, EV > := extractQuantVars(TQ, VS) /\
     AtS := generateQuantificationAtts(UV, EV) .

 op parseCondition : Module Term VariableSet -> Condition .
 eq parseCondition(M, '_/\_[TL], VS) = parseCondition*(M, TL, VS) .
 ceq parseCondition(M, '_=_['bubble[T], 'bubble[T']], VS) = (T1 = T2)
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) .

 op parseCondition* : Module TermList VariableSet -> Condition .
 eq parseCondition*(M, empty, VS) = nil .
 eq parseCondition*(M, (T, TL), VS) = parseCondition(M, T, VS) /\ parseCondition*(M, TL, VS) .

 op parseVars : Term Term -> VariableSet .
 ceq parseVars(T, T') = createVars(QIL, Ty)
  if QIL := parseVars(T) /\
     Ty := downQid(T') .

 op parseVars : Term -> QidList .
 eq parseVars('__[TL]) = parseVars*(TL) .
 eq parseVars(T) = downQid(T) [owise] .

 op parseVars* : TermList -> QidList .
 eq parseVars*(empty) = nil .
 eq parseVars*((T, TL)) = downQid(T) parseVars*(TL) .

 op createVars : QidList Type -> VariableSet .
 eq createVars(nil, Ty) = none .
 ceq createVars(Q QIL, Ty) = V ; createVars(QIL, Ty)
  if V := qid(string(Q) + ":" + string(Ty)) .

 op extractTerms : Term -> TermList .
 eq extractTerms('__[TL]) = extractTerms*(TL) .
 eq extractTerms(T) = T [owise] .

 op extractTerms* : TermList -> TermList .
 eq extractTerms*(empty) = empty .
 eq extractTerms*((T, TL)) = extractTerms(T), extractTerms*(TL) .

 op createSubsortDecls : SortSet Type -> SubsortDeclSet .
 eq createSubsortDecls(none, Ty) = none .
 eq createSubsortDecls(Ty ; SS, Ty') = subsort Ty < Ty' .
                                       createSubsortDecls(SS, Ty') .

 op createFlexOpName : Qid TypeList -> Qid .
 eq createFlexOpName(Q, nil) = qid("@_" + string(Q)) .
 eq createFlexOpName(Q, TyL) = $createFlexOpName(Q, | TyL |) [owise] .

 op $createFlexOpName : Qid NzNat -> Qid .
 ceq $createFlexOpName(Q, N) = qid("@_" + string(Q))
  if S := string(Q) /\
     find(S, "_", 0) =/= notFound .
 ceq $createFlexOpName(Q, N) = Q'
  if S := string(Q) /\
     find(S, "_", 0) == notFound /\
     Q' := qid("@_" + string(Q) + addUnderscores(N)) .

 op |_| : TypeList -> Nat .
 eq | nil | = 0 .
 eq | Ty TyL | = s(| TyL |) .

 op addUnderscores : NzNat -> String .
 eq addUnderscores(N) = "(" + $addUnderscores(N) + ")" .

 op $addUnderscores : NzNat -> String .
 eq $addUnderscores(1) = "_" .
 eq $addUnderscores(s(N)) = "_," + $addUnderscores(N) [owise] .

 op vars2str : VariableSet -> String .
 eq vars2str(none) = "" .
 eq vars2str(V) = string(V) .
 eq vars2str(V ; VS) = string(V) + " ; " + vars2str(VS) [owise] .

 op generateQuantificationAtts : VariableSet VariableSet -> AttrSet .
 eq generateQuantificationAtts(UV, none) = none .
 eq generateQuantificationAtts(UV, EV) = nonexec metadata(vars2str(EV)) .
endfm

