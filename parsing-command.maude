
**************************************

fmod COMMAND-PROCESSING is
 pr AUX-MODULE-OPS .
 pr PARSING-RESULT .
 pr META-LEVEL .
 pr LEXICAL .

 vars RIG RIG' NOM NOM' FLE FLE' SS : SortSet .
 vars M M' M'' TOP TOP' FLAT FLAT' : Module .
 vars VS VS' : VariableSet .
 vars T T' T'' T1 T2 T3 T4 : Term .
 vars QIL QIL' ERR ERR' : QidList .
 vars TL TL' ACC : TermList .
 var  TyL : TypeList .
 vars Ty Ty' : Type .
 var  AtS : AttrSet .
 var  Eq : Equation .
 vars Q Q' : Qid .
 var  V : Variable .
 var  OP : OpDecl .
 var  I : Import .


 op parseNoBubbles : Module Term -> ParsingRes .
 ceq parseNoBubbles(M, '__[T, T']) = [M'', (TL, TL'),
                                      < (RIG ; RIG'), (NOM ; NOM'), (FLE ; FLE') >, ERR ERR' ]
  if [M', TL, < RIG, NOM, FLE >, ERR] := parseDefNoBubble(M, T) /\
     [M'', TL', < RIG', NOM', FLE' >, ERR'] := parseNoBubbles(M', T') .
 eq parseNoBubbles(M, T) = parseDefNoBubble(M, T) .

 
 ***	PARSING IMPORTATION DECLARATIONS
 op parseDefNoBubble : Module Term -> ParsingRes .
 ceq parseDefNoBubble(M, 'pr_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := protecting Q . /\
     M' := addImports(M, I) .
 ceq parseDefNoBubble(M, 'ex_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := extending Q . /\
     M' := addImports(M, I) .
 ceq parseDefNoBubble(M, 'inc_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := including Q . /\
     M' := addImports(M, I) .


 ***	SUBSORTS, OPERATORS, EQUATIONS, AND VARIABLES ARE PARSED LATED.
 eq parseDefNoBubble(M, T) = [M, T, < none, none, none >, nil ] [owise] .

 op parseArity : Term -> TypeList .
 eq parseArity('__[TL]) = parseArity*(TL) .
 eq parseArity(T) = downQid(T) [owise] .

 op parseArity* : TermList -> TypeList .
 eq parseArity*((T, TL)) = downQid(T) parseArity*(TL) .
 eq parseArity*(empty) = nil .

 op parseAttr : Module Term -> AttrSet .
 eq parseAttr(M, '__[TL]) = parseAttr*(M, TL) .
 eq parseAttr(M, 'ctor.@Attr@) = ctor .
 eq parseAttr(M, 'iter.@Attr@) = iter .
 eq parseAttr(M, 'assoc.@Attr@) = assoc .
 eq parseAttr(M, 'comm.@Attr@) = comm .
 eq parseAttr(M, 'idem.@Attr@) = idem .
 eq parseAttr(M, 'memo.@Attr@) = memo .
 eq parseAttr(M, 'id:_['bubble[T]]) = memo . *** TODO

 op parseAttr* : Module TermList -> AttrSet .
 eq parseAttr*(M, empty) = none .
 eq parseAttr*(M, (T, TL)) = parseAttr(M, T) parseAttr*(M, TL) .


 ***	Top module, Flat module, Vars and equations
 op parseBubbles : Module Module TermList -> ParsingRes .
 eq parseBubbles(TOP, FLAT, TL) = parseBubbles(TOP, FLAT, none, TL, empty) .


 ***	PARSE VARIABLES
 *** Top module, Flat module, VariableSet, Vars and equations, Acc
 op parseBubbles : Module Module VariableSet TermList TermList -> ParsingRes .
 eq parseBubbles(TOP, FLAT, VS, empty, ACC) = parseEqs(TOP, FLAT, VS, ACC) .
 ceq parseBubbles(TOP, FLAT, VS, ('var_:_.['neTokenList[T],'token[T']], TL), ACC) =
                             parseBubbles(TOP, FLAT, VS ; VS', TL, ACC)
  if VS' := parseVars(T, T') .
 ceq parseBubbles(TOP, FLAT, VS, ('vars_:_.['neTokenList[T],'token[T']], TL), ACC) =
                             parseBubbles(TOP, FLAT, VS ; VS', TL, ACC)
  if VS' := parseVars(T, T') .


 ***	PARSING OP DECLARATIONS
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`->_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     OP := op Q : nil -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`->_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, T'') /\
     OP := op Q : nil -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_->_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     TyL := parseArity(T') /\
     Q' := downQid(T'') /\
     OP := op Q : TyL -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_->_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T1) /\
     TyL := parseArity(T2) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, T4) /\
     OP := op Q : TyL -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .


 ***	PARSING PARTIAL OP DECLARATIONS
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`~>_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     OP := op Q : nil -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`~>_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, T'') /\
     OP := op Q : nil -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_~>_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     TyL := parseArity(T') /\
     Q' := downQid(T'') /\
     OP := op Q : toKind(FLAT, TyL) -> toKind(FLAT, Q') [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_~>_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T1) /\
     TyL := parseArity(T2) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, T4) /\
     OP := op Q : toKind(FLAT, TyL) -> toKind(FLAT, Q') [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .

 ***	OWISE
 eq parseBubbles(TOP, FLAT, VS, (T, TL), ACC) = parseBubbles(TOP, FLAT, VS, TL, (ACC, T)) [owise] .


 ***	PARSE EQUATIONS
 op parseEq : Module VariableSet Term -> Equation .
 op parseEqs : Module Module VariableSet TermList -> ParsingRes .
 eq parseEqs(TOP, FLAT, VS, empty) = [TOP, VS, nil] .
 ceq parseEqs(TOP, FLAT, VS, (T, TL)) = parseEqs(M, FLAT, VS, TL)
  if Eq := parseEq(FLAT, VS, T) /\
     M := addEqs(TOP, Eq) .

 op parseVars : Term Term -> VariableSet .
 ceq parseVars(T, T') = createVars(QIL, Ty)
  if QIL := parseVars(T) /\
     Ty := downQid(T') .

 op parseVars : Term -> QidList .
 eq parseVars('__[TL]) = parseVars*(TL) .
 eq parseVars(T) = downQid(T) [owise] .

 op parseVars* : TermList -> QidList .
 eq parseVars*(empty) = nil .
 eq parseVars*((T, TL)) = downQid(T) parseVars*(TL) .

 op createVars : QidList Type -> VariableSet .
 eq createVars(nil, Ty) = none .
 ceq createVars(Q QIL, Ty) = V ; createVars(QIL, Ty)
  if V := qid(string(Q) + ":" + string(Ty)) .

 op extractTerms : Term -> TermList .
 eq extractTerms('__[TL]) = extractTerms*(TL) .
 eq extractTerms(T) = T [owise] .

 op extractTerms* : TermList -> TermList .
 eq extractTerms*(empty) = empty .
 eq extractTerms*((T, TL)) = extractTerms(T), extractTerms*(TL) .
endfm

**************************************
**************************************

eof

**************************************
**************************************

