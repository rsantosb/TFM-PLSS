fmod SOFTDISH is
  pr AUX-MODULE-OPS .

 vars UV EV VS : VariableSet .
 vars QIL QIL' : QidList .
 vars Q L R T1 T2 : Term .
 vars Ty Ty' : Type .
 var  M : Module .

 sorts Softdish Sentence SentenceList .
 subsort Sentence < SentenceList .
 subsort Softdish < QidList .

 ***(
              Softdish
 )
 op _>>_ : Module SentenceList -> Softdish [ctor] .

 ***(
              Softdish list
 )
 op noSpec : -> QidList [ctor] .
--- op __ : SoftdishList SoftdishList -> SoftdishList [ctor assoc] .

 ***(
              Sentence: ceq UV, EV . L = R if C .
              @param UV, universally quantified variables.
              @param EV, existentially quantified variables.
              @param L, lefthand side.
              @param R, righthand side.
              @param C, condition (possibly nil).
 )
 op ceq_,_._=_if_. : VariableSet VariableSet Term Term Condition -> Sentence [ctor] .

 ***(
              Sentence list
 )
 op mtSL : -> SentenceList [ctor] .
 op __ : SentenceList SentenceList -> SentenceList [ctor assoc id: mtSL] .
endfm




fmod SOFTDISH-PARSING is
 pr SOFTDISH .

 vars UV EV VS : VariableSet .
 vars T T1 T2 TQ L R : Term .
 vars QIL QIL' : QidList .
 var  SL : SentenceList .
 vars Ty Ty' : Type .
 var  TL : TermList .
 var  M : Module .

 op processSoftdish : Module Term VariableSet -> Softdish .
 ceq processSoftdish(M, T, VS) = M >> SL
  if SL := processSentences(M, T, VS) .
 ***(
 ceq processSoftdish(M, T, VS) = M >> UV, EV ceq T1 = T2 if nil
  if < UV, EV > := extractQuantVars(Q, VS) /\
     QIL := downQidList(L) /\
     QIL' := downQidList(R) /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) . *** TODO
 )
 op processSentences : Module Term VariableSet -> SentenceList .
 eq processSentences(M, '__[TL], VS) = processSentences*(M, TL, VS) .
 eq processSentences(M, T, VS) = processSentence(M, T, VS) [owise] .

 op processSentences* : Module TermList VariableSet -> SentenceList .
 eq processSentences*(M, empty, VS) = mtSL .
 eq processSentences*(M, (T, TL), VS) = processSentence(M, T, VS)
                                        processSentences*(M, TL, VS) .

 op processSentence : Module Term VariableSet -> Sentence .
endfm

