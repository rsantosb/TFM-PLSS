
**************************************

fmod VALUE is
 sort Value .
 ops 0 1 * : -> Value [ctor] .
endfm

**************************************

fmod MATRIX is
 pr VALUE .

 sorts Row SoftSet .
 subsort Value < Row < SoftSet .

 op mtRow : -> Row [ctor] .
 op _,_ : Row Row -> Row [ctor assoc id: mtRow] .

 op mt : -> SoftSet [ctor] .
 op __ : SoftSet SoftSet -> SoftSet [ctor assoc id: mt] .
endfm

**************************************

fmod PREDEF-VALUE-FUNCTIONS is
 pr MATRIX .
 pr RAT .

 vars C BV S L N N0 N1 N* : Nat .
 vars Q BVQ BVQ' : Rat .
 vars M M' : SoftSet .
 var  R : Row .
 var  V V' : Value .


 *** MAX CHOICE VALUE FUNCTION BY ZEROS
 *** Replaces * by 0 and adds up all values
 op undefZero : SoftSet -> Nat .
 eq undefZero(M) = compUndefZero(M, 0, 0, 0) .

 *** Current - Best value - Selected Row
 op compUndefZero : SoftSet Nat Nat Nat -> Nat .
 eq compUndefZero(mt, C, BV, S) = S .
 ceq compUndefZero(R M, C, BV, S) =
               if N >= BV
               then compUndefZero(M, s(C), N, C)
               else compUndefZero(M, s(C), BV, S)
               fi
  if N := addUndefZero(R) .

 op addUndefZero : Row -> Nat .
 eq addUndefZero(mtRow) = 0 .
 eq addUndefZero((0, R)) = addUndefZero(R) .
 eq addUndefZero((1, R)) = s(addUndefZero(R)) .
 eq addUndefZero((*, R)) = addUndefZero(R) .


 *** MAX CHOICE VALUE FUNCTION BY ONES
 *** Replaces * by 1 and adds up all values
 op undefOne : SoftSet -> Nat .
 eq undefOne(M) = compUndefOne(M, 0, 0, 0) .

 *** Current - Best value - Selected Row
 op compUndefOne : SoftSet Nat Nat Nat -> Nat .
 eq compUndefOne(mt, C, BV, S) = S .
 ceq compUndefOne(R M, C, BV, S) =
               if N >= BV
               then compUndefOne(M, s(C), N, C)
               else compUndefOne(M, s(C), BV, S)
               fi
  if N := addUndefOne(R) .

 op addUndefOne : Row -> Nat .
 eq addUndefOne(mtRow) = 0 .
 eq addUndefOne((0, R)) = addUndefOne(R) .
 eq addUndefOne((1, R)) = s(addUndefOne(R)) .
 eq addUndefOne((*, R)) = s(addUndefOne(R)) .


 *** MAX CHOICE VALUE FUNCTION BY ZEROS/ONES
 *** Replaces * by 1 and adds up all values
 op undefSemi : SoftSet -> Nat .
 eq undefSemi(M) = compSemi(M, 0, 0, 0) .

 *** Replaces * by 0.5 and adds up all values
 op compSemi : SoftSet Nat Nat Nat -> Nat .
 eq compSemi(mt, C, BV, S) = S .
 ceq compSemi(R M, C, BV, S) =
               if N >= BV
               then compSemi(M, s(C), N, C)
               else compSemi(M, s(C), BV, S)
               fi
  if N := (addUndefZero(R) + addUndefOne(R)) quo 2 .


 *** MAX CHOICE VALUE FUNCTION WEIGHTED BY ROWS
 op undefWRow : SoftSet -> Rat .
 eq undefWRow(M) = compUndefWRow(M, 0, 0, 0) .

 *** Matrix - Current - Best value - Selected Row
 op compUndefWRow : SoftSet Nat Rat Nat -> Rat .
 eq compUndefWRow(mt, C, BVQ, S) = S .
 ceq compUndefWRow(R M, C, BVQ, S) =
               if BVQ' >= BVQ
               then compUndefWRow(M, s(C), BVQ', C)
               else compUndefWRow(M, s(C), BVQ, S)
               fi
  if BVQ' := addUndefWRow(R) .

 *** Funciones auxiliares para undefWRow
 *** Factorial
 op fact : Nat -> Nat .
 eq fact(0) = 1 .
 eq fact(N) = N * fact(N - 1) .

 *** Combinatorial number
 op over : Nat Nat -> Rat .
 eq over(N, S) = fact(N)/(fact(N - S) * fact(S)) .

 *** NeqValue: number of V's (0, 1 or *) in a row R
 op NeqValue : Row Value -> Nat .
 eq NeqValue(R, V) = addNeqValue(R, V, 0) .
 
 op addNeqValue : Row Value Nat -> Nat .
 eq addNeqValue((V', R), V, N) =
  if V' == V
  then addNeqValue(R, V, s(N))
  else addNeqValue(R, V, N)
  fi .
 eq addNeqValue(mtRow, V, N) = N .

 *** N -> sumatory_i=0^i=N  [i * (N over i)]
 op sumUndefWRow : Nat -> Rat .
 eq sumUndefWRow(N) = addSumUndefWRow(N, N, 0) .

 *** Down-counter - Limit - Partial sum -> sumatory
 op addSumUndefWRow : Nat Nat Rat -> Rat . 
 eq addSumUndefWRow(0, L, Q) = Q .
 eq addSumUndefWRow(s(N), L, Q) = 
    addSumUndefWRow(N, L, Q + s(N) * over(L, s(N))) .

 *** Choice value for a row
 op addUndefWRow : Row -> Rat .
 eq addUndefWRow(mtRow) = 0 .
 ceq addUndefWRow(R) = 
  N1 + sumUndefWRow(N*) / 2 ^ N*
  if N1 := NeqValue(R, 1) /\ N* := NeqValue(R, *) .


 *** MAX CHOICE VALUE FUNCTION WEIGHTED BY COLS
 op undefWCol : SoftSet -> Rat .
 eq undefWCol(M) = compUndefWCol(M, 0, 0, 0, M) .

 *** Current - Best value - Selected Row
 op compUndefWCol : SoftSet Nat Rat Nat SoftSet -> Rat .
 eq compUndefWCol(mt, C, BVQ, S, M') = S .
 ceq compUndefWCol(R M, C, BVQ, S, M') = 
               if BVQ' >= BVQ
               then compUndefWCol(M, s(C), BVQ', C, M')
               else compUndefWCol(M, s(C), BVQ, S, M')
               fi
  if BVQ' := addUndefWCol(R, 0, M') .

 *** Choice value for a row
 op addUndefWCol : Row Nat SoftSet -> Rat .
 eq addUndefWCol(mtRow, N, M) = 0 .
 eq addUndefWCol((0, R), N, M) = addUndefWCol(R, s(N), M) .
 eq addUndefWCol((1, R), N, M) = s(addUndefWCol(R, s(N), M)) .
 ceq addUndefWCol((*, R), N, M) = 
  if Q == 0
  then 1/2
  else addUndefWCol(R, s(N), M) + (fMV(M, 1, N, 0) / Q)
  fi 
 if Q := nrow(M) - fMV(M, *, N, 0) .

 *** Number of rows of a matrix
 op nrow : SoftSet -> Nat .
 eq nrow(mt) = 0 .
 eq nrow(R M) = s(nrow(M)) .

 *** Number of columns of a row
 op ncol : Row -> Nat .
 eq ncol(mtRow) = 0 .
 eq ncol((V, R)) = s(ncol(R)) .

 *** Element of a Row in column C
 op frowcol : Row Nat -> Value .
 eq frowcol((V, R), 0) = V .
 eq frowcol((V, R), s(C)) = frowcol(R, C) .

 *** Compute number of V's in a column C of a matrix
 op fMV : SoftSet Value Nat Nat -> Nat .
 eq fMV(mt, V, C, N) = N .
 eq fMV(R M, V, C, N) =  
  if frowcol(R, C) == V 
  then fMV(M, V, C, s(N))
  else fMV(M, V, C, N)
  fi .
endfm

**************************************

fmod SOFTSET is
 pr VALUE .
 pr DISH .
 pr QID .

 sort AttId Att AttSet SoftDish .
 subsort Qid < AttId .
 subsort Att < AttSet .

 op [_=_] : AttId Value -> Att [ctor] .
 op mtSS : -> AttSet [ctor] .
 op _,_ : AttSet AttSet -> AttSet [ctor assoc comm id: mtSS] .

 op __ : Dish AttSet -> SoftDish [ctor] .

 *** Select dish/atts of a SoftDish T: dish(T), atts(T)
 var DSH : Dish .
 var ATTS : AttSet .

 op dish : SoftDish -> Dish .
 eq dish(DSH ATTS) =  DSH .

 op atts : SoftDish -> AttSet .
 eq atts(DSH ATTS) =  ATTS .
endfm

**************************************

fmod SOFT-SET-FUN is
 pr META-LEVEL .
 pr SOFTSET .
 pr PREDEF-VALUE-FUNCTIONS .

 sort ApplyCell ApplyCellList .
 subsort ApplyCell < ApplyCellList .

 op [_,_] : Qid Nat -> ApplyCell [ctor] .

 vars T T' ATTS ATTS' : Term .
 vars TL TL' : TermList .
 var  SB : Substitution .
 var  V : Variable .
 var  MX : SoftSet .
 var  MX? : [SoftSet] .
 var  M : Module .
 var  Ty : Type .
 var  N : Nat .
 var  Q : Qid .

 *** Variables para función auxiliar putNarrowingAtt
 vars L R : Term .
 var  C : Condition .
 var  AtS : AttrSet .
 var  H : Header .
 var  IL : ImportList .
 var  SS : SortSet .
 var  SSDS : SubsortDeclSet .
 var ODS : OpDeclSet .
 var  MAS : MembAxSet .
 var  EqS : EquationSet .
 vars RS RS' : RuleSet .

var ATTSN : TermList .

 op computeValue : SoftSet Qid -> Nat .
 eq computeValue(MX,'undefZero) = undefZero(MX) .
 eq computeValue(MX,'undefOne)  = undefOne(MX) .
 eq computeValue(MX,'undefSemi) = undefSemi(MX) .
 eq computeValue(MX,'undefWRow) = undefWRow(MX) .
 eq computeValue(MX,'undefWCol) = undefWCol(MX) .


 *** Función que ejecuta softrew
 op rewStrat : Module Term TermList Qid -> Term .
 ceq rewStrat(M, T, ATTSN, Q) = T'
   if T' := next(M, T, ATTSN, Q) .
 eq rewStrat(M, T, ATTSN, Q) = T [owise] .

 op next : Module Term TermList Qid ~> Term .
 ceq next(M, T, ATTSN, Q) = T'
  if TL := allReachableTerms(M, T) /\
     TL =/= empty /\
     MX := matrixFromTerms(TL, ATTSN) /\
     N := computeValue(MX, Q) /\
     T' := TL [N] .

 op allReachableTerms : Module Term -> TermList .
 ceq allReachableTerms(M, T) = allReachableTerms(M, T, V, 0, empty)
  if Ty := getType(metaReduce(M, T)) /\
     V := qid("V:" + string(Ty)) .

 op allReachableTerms : Module Term Variable Nat TermList -> TermList .
 ceq allReachableTerms(M, T, V, N, TL) = TL
  if metaSearch(M, T, V, nil, '+, unbounded, N) == failure .
 ceq allReachableTerms(M, T, V, N, TL) = allReachableTerms(M, T, V, s(N), (TL, T'))
  if {T', Ty, SB} := metaSearch(M, T, V, nil, '+, unbounded, N) .


 *** Función que ejecuta softnarrowrew
 op rewNStrat : Module Term TermList Qid -> Term .
 ceq rewNStrat(M, T, ATTSN, Q) = T'
   if T' := nextN(M, T, ATTSN, Q) .
 eq rewNStrat(M, T, ATTSN, Q) = T [owise] .

 op nextN : Module Term TermList Qid ~> Term .
 ceq nextN(M, T, ATTSN, Q) = T'
  if TL := allReachableNTerms(M, T) /\
     TL =/= empty /\
     MX := matrixFromTerms(TL, ATTSN) /\
     N := computeValue(MX, Q) /\
     T' := TL [N] .

 op allReachableNTerms : Module Term -> TermList .
 ceq allReachableNTerms(M, T) = allReachableNTerms(M, T, V, 0, empty)
  if Ty := getType(metaReduce(M, T)) /\
     V := qid("V:" + string(Ty)) .

 op allReachableNTerms : Module Term Variable Nat TermList -> TermList .
 ceq allReachableNTerms(M, T, V, N, TL) = TL
  if metaNarrowingSearch(putNarrowingAtt(M), T, V, '+, unbounded, 'none, N) == failure .
 ceq allReachableNTerms(M, T, V, N, TL) = allReachableNTerms(M, T, V, s(N), (TL, T'))
  if {T', Ty, SB, VQid:Qid, VSubs2:Substitution, VQid2:Qid} := metaNarrowingSearch(putNarrowingAtt(M), T, V, '+, unbounded, 'none, N) .


 *** Funciones auxiliares para rewStrat y rewNStrat
 op getAtts : Term -> Term .
 eq getAtts('__[T, ATTS]) = ATTS .


 op matrixFromTerms : TermList TermList -> SoftSet .
 eq matrixFromTerms(empty, ATTSN) = mt .
 eq matrixFromTerms((T, TL), ATTSN) = rowFromTerm(T, ATTSN) matrixFromTerms(TL, ATTSN) .

 *** Dish and Attributes
 op rowFromTerm : Term TermList -> Row .
 eq rowFromTerm('__[T, T'], ATTSN) = $rowFromTerm(T', ATTSN) .
 eq rowFromTerm(T, ATTSN) = mtRow [owise] .
 
  op $rowFromTerm : Term TermList -> Row .
 *** Attribute list
 eq $rowFromTerm('_`,_[TL], ATTSN) = $rowFromTerm*(TL, ATTSN) .
 eq $rowFromTerm(T, ATTSN) = mtRow [owise] .

 op $rowFromTerm* : TermList TermList -> Row .
 eq $rowFromTerm*(empty, ATTSN) = mtRow .
 eq $rowFromTerm*(('`[_=_`][T,T'], TL), ATTSN) =
                        if T in ATTSN
                        then downTerm(T', 0)
                        else mtRow
                        fi, $rowFromTerm*(TL, ATTSN) .
 eq $rowFromTerm*(TL, ATTSN) = mtRow [owise] .

 op _in_ : Term TermList -> Bool .
 eq T in (TL, T, TL') = true .
 eq T in TL = false [owise] .

 op _[_] : TermList Nat ~> Term .
 eq (T, TL) [0] = T .
 eq (T, TL) [s(N)] = TL [N] .
*** Fin de funciones auxiliares


*** Función auxiliar que imprime (QidList) sustituciones:
 op printSB : Module Substitution -> QidList .
 eq printSB (M, none) = 'none .
 eq printSB (M, V:Variable <- T:Term) = getName(V:Variable)    '<-    metaPrettyPrint(M, T:Term) .
 eq printSB (M, V:Variable <- T:Term ; S:Substitution) =  printSB (M, V:Variable <- T:Term)  printSB(M, S:Substitution) .


*** Función auxiliar putNarrowingAtt que modifica un modulo añadiendo el atributo narrowing a cada regla:
 op putNarrowingAtt : Module -> Module .
 ceq putNarrowingAtt(M) = setRules(M, RS')
  if RS' := putNarrowingAtt(getRules(M)) .

 op putNarrowingAtt : RuleSet -> RuleSet .
 eq putNarrowingAtt(none) = none .
 ceq putNarrowingAtt(rl L => R [AtS] . RS) = rl L => R [AtS] . putNarrowingAtt(RS)
  if hasNarrowing(AtS) .
 ceq putNarrowingAtt(crl L => R if C [AtS] . RS) = crl L => R if C [AtS] . putNarrowingAtt(RS)
  if hasNarrowing(AtS) .
 ceq putNarrowingAtt(rl L => R [AtS] . RS) = rl L => R [narrowing AtS] . putNarrowingAtt(RS)
  if not hasNarrowing(AtS) .
 ceq putNarrowingAtt(crl L => R if C [AtS] . RS) = crl L => R if C [narrowing AtS] . putNarrowingAtt(RS)
  if not hasNarrowing(AtS) .

 op hasNarrowing : AttrSet -> Bool .
 eq hasNarrowing(narrowing AtS) = true .
 eq hasNarrowing(AtS) = false [owise] .

 op setRules : SModule RuleSet -> SModule .
 eq setRules(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, RS') =  
                       mod H is IL sorts SS . SSDS ODS MAS EqS RS' endm .

 op getRules : SModule -> RuleSet .
 eq getRules(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm)  =  RS .
*** Fin de funciones auxiliares
endfm

**************************************
**************************************

eof

**************************************
**************************************
