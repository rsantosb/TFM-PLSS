
**************************************

view Oid from TRIV to CONFIGURATION is
 sort Elt to Oid .
endv

**************************************

view Module from TRIV to META-MODULE is
 sort Elt to Module .
endv

**************************************

fmod MAYBE{X :: TRIV} is
 sort Maybe{X} .
 subsort X$Elt < Maybe{X} .
 op maybe : -> Maybe{X} [ctor] .
endfm

**************************************

fmod MODULE-ENTRY is
  pr META-LEVEL .

  vars SS SS' SS'' : SortSet .
  var  VS : VariableSet .

  sorts Entry ModuleInfo SortInfo .

 ***   Rigid  Nominal Flexible   ***
 op <_,_,_> : SortSet SortSet SortSet -> SortInfo [ctor] .
 op <_,_,_|_> : SortSet SortSet SortSet VariableSet -> ModuleInfo [ctor] .

 op getVS : ModuleInfo -> VariableSet .
 eq getVS(< SS, SS', SS'' | VS >) = VS .

 op _->_ : Qid ModuleInfo -> Entry [ctor] .
endfm

**************************************

view Entry from TRIV to MODULE-ENTRY is
 sort Elt to Entry .
endv

**************************************

fmod DATABASE is
 pr SET{Entry} * (sort Set{Entry} to Database) .

 vars SS SS' SS'' : SortSet .
 vars VS VS' : VariableSet .
 vars SI SI' : ModuleInfo .
 var  DB : Database .
 var  Q : Qid .

 op _[_] : Database Qid ~> ModuleInfo .
 eq (DB, Q -> SI)[Q] = SI .

 op _[_|->_] : Database Qid SortInfo -> Database .
 eq DB [ Q |-> < SS, SS', SS'' > ] = DB [ Q |-> < SS, SS', SS'' | none > ] .

 op _[_|->_] : Database Qid ModuleInfo -> Database .
 eq (DB, Q -> SI)[Q |-> SI'] = (DB, Q -> SI') .
 eq DB[Q |-> SI'] = (DB, Q -> SI') [owise] .

 op _[_|->_] : Database Qid VariableSet -> Database .
 eq (DB, Q -> < SS, SS', SS'' | VS >)[Q |-> VS'] = (DB, Q -> < SS, SS', SS'' | VS' >) .
 eq DB[Q |-> VS] = (DB, Q -> < none, none, none | VS >) [owise] .
endfm

**************************************

fmod PARSING-RESULT is
 inc DATABASE .

 sort ParsingRes Database? .
 subsort Database < Database? .
 
 op parsingError : -> Database? [ctor] .
 op [_,_,_,_] : Module TermList SortInfo QidList -> ParsingRes [ctor] .
 op [_,_,_] : Module VariableSet QidList -> ParsingRes [ctor] .
endfm

**************************************

fmod PRELOAD is
 pr QID .
 sort Preload .
 op module : Qid -> Preload [ctor] .
 op view : Qid -> Preload [ctor] .
endfm

**************************************

view Preload from TRIV to PRELOAD is
 sort Elt to Preload .
endv

**************************************

fmod PRELOAD-LIST is
 pr LIST{Preload} .
endfm

**************************************

fmod AUX-MODULE-OPS is
 pr META-LEVEL .
 pr DATABASE .

 var SSDS : SubsortDeclSet .
 vars EqS EqS' : EquationSet .
 vars ODS ODS' : OpDeclSet .
 vars IL IL' : ImportList .
 vars TL TL' : TermList .
 vars SS SS' : SortSet .
 var RS : RuleSet .
 var  MAS : MembAxSet .
 var  TyL : TypeList .
 var  Ct : Constant .
 var  M : Module .
 var  H : Header .
 var  Ty : Type .
 var  T : Term .
 var  Q : Qid .


 op setImports : Module ImportList -> Module .
 eq setImports(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, IL')
    = fmod H is IL' sorts SS . SSDS ODS MAS EqS endfm .
 eq setImports(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, IL')
    = mod H is IL' sorts SS . SSDS ODS MAS EqS RS endm .
 eq setImports(fth H is IL sorts SS . SSDS ODS MAS EqS endfth, IL')
    = fth H is IL' sorts SS . SSDS ODS MAS EqS endfth .
 eq setImports(th H is IL sorts SS . SSDS ODS MAS EqS RS endth, IL')
    = th H is IL' sorts SS . SSDS ODS MAS EqS RS endth .

 op setOps : Module OpDeclSet -> Module .
 eq setOps(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, ODS')
    = fmod H is IL sorts SS . SSDS ODS' MAS EqS endfm .
 eq setOps(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, ODS')
    = mod H is IL sorts SS . SSDS ODS' MAS EqS RS endm .
 eq setOps(fth H is IL sorts SS . SSDS ODS MAS EqS endfth, ODS')
    = fth H is IL sorts SS . SSDS ODS' MAS EqS endfth .
 eq setOps(th H is IL sorts SS . SSDS ODS MAS EqS RS endth, ODS')
    = th H is IL sorts SS . SSDS ODS' MAS EqS RS endth .

 op setEqs : Module EquationSet -> Module .
 eq setEqs(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, EqS')
    = fmod H is IL sorts SS . SSDS ODS MAS EqS' endfm .
 eq setEqs(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, EqS')
    = mod H is IL sorts SS . SSDS ODS MAS EqS' RS endm .
 eq setEqs(fth H is IL sorts SS . SSDS ODS MAS EqS endfth, EqS')
    = fth H is IL sorts SS . SSDS ODS MAS EqS' endfth .
 eq setEqs(th H is IL sorts SS . SSDS ODS MAS EqS RS endth, EqS')
    = th H is IL sorts SS . SSDS ODS MAS EqS' RS endth .


 op addImports : Module ImportList -> Module .
 eq addImports(M, IL) = setImports(M, (getImports(M) IL)) .

 op addOps : Module OpDeclSet -> Module .
 eq addOps(M, ODS) = setOps(M, getOps(M) ODS) .

 op addEqs : Module EquationSet -> Module .
 eq addEqs(M, EqS) = setEqs(M, getEqs(M) EqS) .


 op downQid : Term -> [Qid] [memo] .
 eq downQid(Ct) = qid(substr(string(getName(Ct)), 1, length(string(getName(Ct))))) .

 op downQidList : Term ~> QidList .
 eq downQidList('nil.TypeList) = nil .
 eq downQidList(('__[TL], TL')) = (downQidList(TL) downQidList(TL')) .
 eq downQidList((Q, TL)) = (downQid(Q) downQidList(TL)) .
 eq downQidList(empty) = nil .

 op printOptions : -> PrintOptionSet .
 eq printOptions = mixfix number rat format .

 op metaPrettyPrint : Module Term -> QidList .
 eq metaPrettyPrint(M, T) = metaPrettyPrint(M, T, printOptions) .

 op toKind : Module TypeList -> TypeList .
 eq toKind(M, nil) = nil .
 eq toKind(M, Ty TyL) = getKind(M, Ty) toKind(M, TyL) .
endfm

**************************************

fmod ERROR-MSGS is
 pr QID-LIST .

 sort ErrorPrintTuple .

 op [_,_,_] : QidList Qid QidList -> ErrorPrintTuple [ctor] .

 vars QIL PRE PRE' POST POST' : QidList .
 vars Q NAME : Qid .
 var  N : Nat .

 op showMsg : QidList Nat -> QidList .
 ceq showMsg(QIL, N) = 'Parsing 'error 'in 'module NAME '. 'Unexpected 'term: '\n
                       PRE' Q '<---- 'HERE POST' '\n
  if [ PRE, Q, POST ] := divide(QIL, N) /\
     NAME := moduleName(PRE) /\
     PRE' := backwardsPick(PRE) /\
     POST' := forwardPick(POST) .
 ceq showMsg(QIL, N) = 'Parsing 'error. 'Unexpected 'term: '\n
                       PRE' Q '<---- 'HERE POST' '\n
  if [ PRE, Q, POST ] := divide(QIL, N) /\
     not (moduleName(PRE) :: Qid) /\
     PRE' := backwardsPick(PRE) /\
     POST' := forwardPick(POST) .

 op backwardsPick : QidList -> QidList .
 eq backwardsPick(nil) = nil .
 eq backwardsPick(QIL Q) =
     if initialQid(Q)
     then Q
     else backwardsPick(QIL) Q
     fi .

 op forwardPick : QidList -> QidList .
 eq forwardPick(nil) = nil .
 eq forwardPick(Q QIL) =
     if initialQid(Q)
     then nil
     else Q forwardPick(QIL)
     fi .

 op initialQid : Qid -> Bool .
 eq initialQid('pr) = true .
 eq initialQid('ex) = true .
 eq initialQid('inc) = true .
 eq initialQid('sort) = true .
 eq initialQid('subsort) = true .
 eq initialQid('op) = true .
 eq initialQid('var) = true .
 eq initialQid('vars) = true .
 eq initialQid('eq) = true .
 eq initialQid('ceq) = true .
 eq initialQid(Q) = false [owise] .

 op divide : QidList Nat -> ErrorPrintTuple .
 eq divide(QIL, N) = $divide(QIL, N, nil) .

 op $divide : QidList Nat QidList ~> ErrorPrintTuple .
 eq $divide(Q QIL, 0, PRE) = [ PRE, Q, QIL ] .
 eq $divide(Q QIL, s(N), PRE) = $divide(QIL, N, PRE Q) .

 op moduleName : QidList ~> Qid .
 eq moduleName(QIL Q) = moduleName(QIL) .
endfm

**************************************
**************************************

eof

**************************************
**************************************


